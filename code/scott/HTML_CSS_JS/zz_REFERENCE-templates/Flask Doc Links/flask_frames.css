https://pythonbasics.org/flask-tutorial-templates/#template-example

from flask import render_template

@app.route('/')
def index():
    return 'Web App with Python Flask!'
Into one that renders the template and passes variables:

@app.route('/')
@app.route('/index')
def index():
    name = 'Rosalia'
    return render_template('index.html', title='Welcome', username=name)
Then start the app:

sudo python3 app.py
It will then show some text in the terminal:

* Serving Flask app "app" (lazy loading)
* Environment: production
  WARNING: This is a development server. Do not use it in a production deployment.
  Use a production WSGI server instead.
* Debug mode: off
* Running on http://0.0.0.0:81/ (Press CTRL+C to quit)

flask template if
You can include if statements in your template. The same operators that you would use in Python can be used (==, >, <, >=, <=,). 
A clause like else or elif can be used also.

In this code, the output will differ depending on the input variable username. 
The username is passed in the Python code (business logic) to the template (presentation logic).

<html>
    <head>
        <title>{{ title }}</title>
    </head>
    <body>
        {% if username == "Rosalia": %}
        <h1>Hello my love</h1>
	{% else %}
        <h1>Hello {{ username }}</h1>
	{% endif %}
    </body>
</html>



flask template for loop
If you have a bulk of data, like a list of users, you want to use a for loop to iterate over it. Change the Python code to this:

@app.route('/')
@app.route('/index')
def index():
    users = [ 'Rosalia','Adrianna','Victoria' ]
    return render_template('index.html', title='Welcome', members=users)
The code includes a list (users). That list is passed to the render_template function. In the template, 
you can use a for loop to iterate over the list.

<html>
    <head>
        <title>{{ title }}</title>
    </head>
    <body>
        <ul>
        {% for member in members: %}
        <li>{{ member }}</li>
	{% endfor %}
	</ul>
    </body>
</html>
For code the tags {% and %} are used.
To display variables, write the tags {{ and }} .




