# Assignment:
https://github.com/PdxCodeGuild/class_otter/blob/main/3%20Django/labs/lab07-pokedex.md

# Resources:
    # Pokedex:
    https://github.com/flamingveggies/pokedex

    # Django Rest Framework:
    https://www.django-rest-framework.org/
    https://learndjango.com/tutorials/django-rest-framework-tutorial-todo-api

    # Django Project Setup:
    https://github.com/PdxCodeGuild/class_otter/blob/main/3%20Django/docs/Django%20Project%20Setup.md

    # Django admin documentation generator:
    https://docs.djangoproject.com/en/3.2/ref/contrib/admin/admindocs/#module-django.contrib.admindocs

    # Docutils:
    https://docutils.sourceforge.io/

    # Django tutorial:
    https://docs.djangoproject.com/en/3.2/intro/tutorial01/

    # Django customizing:
    https://docs.djangoproject.com/en/3.2/topics/auth/customizing/

    ##### This seems like a better custom user guide #####
    https://learndjango.com/tutorials/django-custom-user-model

    # Django on GitHub:
    https://github.com/django/django/tree/main/django


# Activate virtual environment:
    # BASH:
        source C:/Users/Bruce/.virtualenvs/<virtual environment name>/Scripts/activate
    # PS:
        C:\Users\Bruce\.virtualenvs\<virtual environment name>\Scripts\activate.ps1

    # BASH:
        source C:/Users/Bruce/.virtualenvs/pokedex_main-6XpG_hGW/Scripts/activate
    # PS:
        C:\Users\Bruce\.virtualenvs\pokedex_main-6XpG_hGW\Scripts\activate.ps1


# Start server:
python .\manage.py runserver 8010


# Link to 'home':
http://localhost:8010/
# Link to 'admin':
http://localhost:8010/admin/


### STEP ###
# Create virtual environment:
pipenv install


### STEP ###
# Activate virtual environment:
C:\Users\Bruce\.virtualenvs\pokedex_main-6XpG_hGW\Scripts\activate.ps1


### STEP ###
# Migrate 'users' first since we have CustomUser:
python manage.py migrate users


### STEP ###
# Migrate the other models:
python manage.py migrate


### STEP ###
# Create superuser:
python manage.py createsuperuser


### STEP ###
# Load Pokemon into database:
python manage.py load_pokemon


### STEP ###
# Start server
python .\manage.py runserver 8010


### STEP ###
# superuser: dezzi


### STEP ###
# Install docutils and drf:
pipenv install docutils==0.18.1 djangorestframework==3.13.1


### STEP ###
# Create app 'api':
python .\manage.py startapp $APP_NAME
python .\manage.py startapp api


### STEP ###
## URLS ##
# Add api path() to 'pokedex_project.urls.py':
urlpatterns = [
    ...
    path('api/v1/', include('api.urls')),
    ...
]


### STEP ###
## VIEWS ##
# Create 'api.views.py':
from rest_framework import viewsets
from pokemon.models import Pokemon
from .serializers import PokemonSerializer
class PokemonViewSet(viewsets.ModelViewSet):
    queryset = Pokemon.objects.all()
    serializer_class = PokemonSerializer


### STEP ###
## SERIALIZERS ##
# 'api.serializers.py':
from rest_framework import serializers
from pokemon.models import Pokemon
class PokemonSerializer(serializers.ModelSerializer):
    class Meta:
        model = Pokemon
        fields = ('number', 'name', 'height', 'weight')


# Link to 'api':
curl http://localhost:8010/api/v1/
curl http://localhost:8010/api/v1/pokemons/
http://localhost:8010/api/v1/pokemons/1/


### STEP ###
# Add to 'pokedex_project.urls.py':
urlpatterns = [
    ...
    path('api-auth/', include('rest_framework.urls')),
    ...
]


### NOTE ###
# Delete a few Pokemon, which were added in test.
Can delete while logged in browsable api as user_name 'bruce'.
Can also delete while not logged in browsable api as user_name 'bruce'.


### STEP ###
# Create 'api.permissions.py' and add '':
from rest_framework import permissions

class IsLoggedInOrReadOnly(permissions.BasePermission):
    def has_permission(self, request, view):
        print("request.user: ", request.user)
        return True

# Add to 'api.views.py':
from .permissions import IsLoggedInOrReadOnly
class PokemonViewSet(viewsets.ModelViewSet):
    ...
    permission_classes = [IsLoggedInOrReadOnly]
    ...

### NOTE ###
# Not logged in:    request.user:  bruce
# Logged in:        request.user:  AnonymousUser

### NOTE ###
# Access to api view 'TypeViewSet' still allowed since there are no 'permission_classes' set in 'TypeViewSet'.
# Allows no access to api view 'PokemonViewSet':
class IsLoggedInOrReadOnly(permissions.BasePermission):
    def has_permission(self, request, view):
        return False

####################
# Doesn't work.
### NOTE ###
# Provide access:
# request.user = a_username

# Deny access:
# request.user == 'AnonymousUser' or request.user == ''
####################


### NOTE ###
# is_authenticated
https://docs.djangoproject.com/en/4.0/topics/auth/default/#authentication-in-web-requests


### STEP ###
# Final 'IsLoggedInOrReadOnly' in 'api.permissions.py':
class IsLoggedInOrReadOnly(permissions.BasePermission):
    def has_permission(self, request, view):

        if request.method in permissions.SAFE_METHODS:
            return True
        
        return request.user.is_authenticated


### NOTE ###
# A User needs to be logged in to change or add Pokemon.


### STEP ###
### STEP ###
### STEP ###