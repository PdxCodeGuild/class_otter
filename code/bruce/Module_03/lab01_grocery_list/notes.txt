# Assignment:
https://github.com/PdxCodeGuild/class_otter/blob/main/3%20Django/labs/lab01-grocery-list.md


# Resources:
# Django - Built-in template tags and filters:
    https://docs.djangoproject.com/en/4.0/ref/templates/builtins/
# Djange app tutorial:
    https://docs.djangoproject.com/en/4.0/intro/tutorial01/
# Django QuerySet API Reference:
    https://docs.djangoproject.com/en/4.0/ref/models/querysets/
# Django Setup:
    https://github.com/PdxCodeGuild/class_otter/blob/main/3%20Django/docs/Django%20Project%20Setup.md

# 1 #
# Install pipenv and Django version 3.2:
pipenv install django==3.2

# 2 #
# Activate virtual environment:
    # BASH:
        source /c/Users/Bruce/.virtualenvs/grocery_project-Cj_hvn1N/Scripts/activate
        source C:/Users/Bruce/.virtualenvs/grocery_project-Cj_hvn1N/Scripts/activate
    # PowerShell:
        C:\Users\Bruce\.virtualenvs\grocery_project-Cj_hvn1N\Scripts\activate.ps1

# 3 #
# Create skeleton Django project:
django-admin startproject grocery_project .

# 4 #
# Test server:
python manage.py runserver
    # Options:
    python manage.py runserver 8080
    python manage.py runserver 0:8000

# NOTE: Order of #4# and #5# doesn't matter.
# 5 #
# Create skeleton Django app:
python manage.py startapp grocery_list

# 6 #
# Create and populate grocery_list/urls.py
path('', views.index, name='index'),

# 7 #
# Add to grocery_project/urls.py
path('grocery_list/', include('grocery_list.urls')),

# 8 #
# Test server:
# http://127.0.0.1:8000/grocery_list/
python manage.py runserver
    # Options:
    python manage.py runserver 8080
    python manage.py runserver 0:8000

# 9 #
# Import the_secrets:
import the_secrets
SECRET_KEY = the_secrets.grocery_django_key

# Resources:
https://docs.djangoproject.com/en/4.0/intro/tutorial02/

# 10 #
# migrate:
python manage.py migrate

# 11 #
# Create model:
grocery_list/models.py

# 12 #
# Add app to grocery_project/settings.py
'grocery_list.apps.GroceryListConfig'

# 13 #
# makemigrations:
python manage.py makemigrations grocery_list

# 14 #
# Check migrations:
python manage.py sqlmigrate grocery_list 0001

# 15 #
# Do the migrations:
python manage.py migrate

# 16 #
# Play with the database in shell:
python manage.py shell

# Imports
from grocery_list.models import GroceryItem
from django.utils import timezone

GroceryItem.objects.all()
# <QuerySet []>

g = GroceryItem(description="Ecks", created_date=timezone.now())

g
<GroceryItem: GroceryItem object (None)>

g.description
'Ecks'

g.created_date
datetime.datetime(2022, 2, 18, 22, 19, 56, 757835, tzinfo=<UTC>)

g.is_completed
False

g.save()
django.db.utils.IntegrityError: NOT NULL constraint failed: grocery_list_groceryitem.completed_date

# NOTE: Need to allow blank completed_date
# Modify model:
completed_date = models.DateTimeField('date completed', blank=True)

# Migrations:
python manage.py makemigrations grocery_list
python manage.py sqlmigrate grocery_list 0002
python manage.py migrate

# NOTE: Resume shell fun:
python manage.py shell
from grocery_list.models import GroceryItem
from django.utils import timezone

g = GroceryItem(description="Ecks", created_date=timezone.now())
>>> g.description
'Ecks'
>>> g.created_date
datetime.datetime(2022, 2, 18, 22, 32, 53, 852817, tzinfo=<UTC>)
>>> g.id
>>> g.completed_date
>>> g.is_completed
False

g.save()
django.db.utils.IntegrityError: NOT NULL constraint failed: grocery_list_groceryitem.completed_date

# NOTE: Tried blank=True, now try null=True.

# Migrations:
python manage.py makemigrations grocery_list
python manage.py sqlmigrate grocery_list 0002
python manage.py migrate

# NOTE: Resume shell fun:
python manage.py shell
from grocery_list.models import GroceryItem
from django.utils import timezone

g = GroceryItem(description="Ecks", created_date=timezone.now())
>>> g.save()
>>>

# NOTE: g.save() working now, proceed with fun:

g = GroceryItem.objects.create(description="Cat Nip - Premium!", created_date=timezone.now())

GroceryItem.objects.all()
<QuerySet [<GroceryItem: GroceryItem object (1)>, <GroceryItem: GroceryItem object (2)>]>
>>> g.id
2
>>> g.description
'Cat Nip - Premium!'
>>> g.is_completed
False
>>> g.created_date
datetime.datetime(2022, 2, 18, 22, 45, 25, 408210, tzinfo=<UTC>)
>>> g.completed_date
>>> 

>>> pk = 1
>>> GroceryItem.objects.get(pk=pk)
<GroceryItem: GroceryItem object (1)>
>>> GroceryItem.objects.get(pk=2)  
<GroceryItem: GroceryItem object (2)>

Did you rename groceryitem.is_completed to groceryitem.completed (a BooleanField)? [y/N] y

g = GroceryItem.objects.create(description="Cat Nip - Super Premium!", created_date=timezone.now())
g = GroceryItem(description="Kat Fude - Moist, of course!", created_date=timezone.now())

g = GroceryItem.objects.get(pk=2)






