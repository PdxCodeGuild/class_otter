>>> from django.utils import timezone
>>> from polls.models import Question, Choice
>>> 

>>> Question.objects.all()
<QuerySet [<Question: Question object (1)>]>

>>> q = Question(question_text="What's your favorite programming language?", pub_date=timezone.now())

>>> q.id
>>> q.question_text
"What's your favorite programming language?"
>>> q.save()
>>> Question.objects.all()
<QuerySet [<Question: Question object (1)>, <Question: Question object (2)>]>
>>> exit()

>>> from django.utils import timezone
>>> from polls.models import Question, Choice

>>> Question.objects.all()
<QuerySet [<Question: What's new?>, <Question: What's your favorite programming language?>]>

>>> Question.objects.filter(id=1)
<QuerySet [<Question: What's new?>]>

>>> Question.objects.filter(question_text__contains="programming")
<QuerySet [<Question: What's your favorite programming language?>]>

>>> Question.objects.filter(pub_date__year="2022")
<QuerySet [<Question: What's new?>, <Question: What's your favorite programming language?>]>

>>> Question.objects.filter(question_text__startswith="M")
<QuerySet []>

########### get expects one record, multiple records results in error ###########
>>> Question.objects.get(pub_date__year="2022")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Users/merritt/.local/share/virtualenvs/polls-22jan-Sv9w2YYC/lib/python3.8/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/merritt/.local/share/virtualenvs/polls-22jan-Sv9w2YYC/lib/python3.8/site-packages/django/db/models/query.py", line 439, in get
    raise self.model.MultipleObjectsReturned(
polls.models.Question.MultipleObjectsReturned: get() returned more than one Question -- it returned 2!

#### get will error if no record matches results ####
>>> Question.objects.get(pub_date__year="2021")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Users/merritt/.local/share/virtualenvs/polls-22jan-Sv9w2YYC/lib/python3.8/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/merritt/.local/share/virtualenvs/polls-22jan-Sv9w2YYC/lib/python3.8/site-packages/django/db/models/query.py", line 435, in get
    raise self.model.DoesNotExist(
polls.models.Question.DoesNotExist: Question matching query does not exist.

>>> Question.objects.get(id=1)
<Question: What's new?>

>>> Question.objects.get(pk=2)
<Question: What's your favorite programming language?>

>>> q
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'q' is not defined

>>> q = Question.objects.get(pk=1)

>>> q
<Question: What's new?>

>>> q.id
1

>>> q.question_text
"What's new?"

>>> q.pub_date
datetime.datetime(2022, 2, 16, 0, 28, 20, 289065, tzinfo=<UTC>)

>>> q.pub_date.year
2022

>>> q.was_published_recently()
True

>>> q.question_text = "What's up?"

>>> q
<Question: What's up?>

#### Can't seem to directly change pub_date this way ####
>>> q.pub_date.day = 15
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: attribute 'day' of 'datetime.date' objects is not writable

>>> q.save()

>>> Choice.objects.all()
<QuerySet []>

>>> Choice.objects.filter(question=q)
<QuerySet []>

>>> q.choices.all()
<QuerySet []>

>>> q
<Question: What's up?>

>>> c = Choice(question=q, choice_text="Not much", votes=0)

>>> c.save()

>>> Choice.objects.create(question=q, choice_text="The sky")
<Choice: The sky>

>>> c
<Choice: Not much>

>>> c3 = q.choices.create(choice_text="just adding more choices!")

>>> c3
<Choice: just adding more choices!>

>>> q.choices.all()
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: just adding more choices!>]>

>>> c.question
<Question: What's up?>

>>> c.question.choices.all()
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: just adding more choices!>]>

>>> c4 = q.choices.create(choice_text="go away! i don't want to answer any questions!")

>>> c4.question
<Question: What's up?>

>>> q.choices.all()
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: just adding more choices!>, <Choice: go away! i don't want to answer any questions!>]>

>>> len(q.choices.all())
4

>>> q.choices.count()
4

>>> c4
<Choice: go away! i don't want to answer any questions!>

>>> c4.delete()
(1, {'polls.Choice': 1})

>>> exit()

